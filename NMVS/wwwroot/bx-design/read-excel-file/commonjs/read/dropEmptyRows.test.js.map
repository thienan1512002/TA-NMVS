{"version":3,"sources":["../../source/read/dropEmptyRows.test.js"],"names":["describe","it","onlyTrimAtTheEnd","should","deep","equal","rowMap"],"mappings":";;AAAA;;;;AAEAA,QAAQ,CAAC,eAAD,EAAkB,YAAM;AAC/BC,EAAAA,EAAE,CAAC,0CAAD,EAA6C,YAAM;AACpD,mCAAc,CACb,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CADa,EAEb,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAFa,EAGb,CAAC,IAAD,EAAO,GAAP,EAAY,IAAZ,CAHa,EAIb,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CAJa,EAKb,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CALa,EAMb,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CANa,CAAd,EAOG;AACFC,MAAAA,gBAAgB,EAAE;AADhB,KAPH,EAUCC,MAVD,CAUQC,IAVR,CAUaC,KAVb,CAUmB,CAClB,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CADkB,EAElB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAFkB,EAGlB,CAAC,IAAD,EAAO,GAAP,EAAY,IAAZ,CAHkB,EAIlB,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CAJkB,EAKlB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CALkB,CAVnB;AAiBA,GAlBC,CAAF;AAoBAJ,EAAAA,EAAE,CAAC,wBAAD,EAA2B,YAAM;AAClC,mCAAc,CACb,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CADa,EAEb,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAFa,EAGb,CAAC,IAAD,EAAO,GAAP,EAAY,IAAZ,CAHa,EAIb,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CAJa,EAKb,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CALa,EAMb,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CANa,CAAd,EAQCE,MARD,CAQQC,IARR,CAQaC,KARb,CAQmB,CAClB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CADkB,EAElB,CAAC,IAAD,EAAO,GAAP,EAAY,IAAZ,CAFkB,EAGlB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAHkB,CARnB;AAaA,GAdC,CAAF;AAgBAJ,EAAAA,EAAE,CAAC,kDAAD,EAAqD,YAAM;AAC5D,QAAMK,MAAM,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAAf;AAEA,mCAAc,CACb,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CADa,EAEb,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAFa,EAGb,CAAC,IAAD,EAAO,GAAP,EAAY,IAAZ,CAHa,EAIb,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CAJa,EAKb,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CALa,CAAd,EAOA;AAAEA,MAAAA,MAAM,EAANA;AAAF,KAPA,EAQCH,MARD,CAQQC,IARR,CAQaC,KARb,CAQmB,CAClB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CADkB,EAElB,CAAC,IAAD,EAAO,GAAP,EAAY,IAAZ,CAFkB,EAGlB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAHkB,CARnB;AAcAC,IAAAA,MAAM,CAACH,MAAP,CAAcC,IAAd,CAAmBC,KAAnB,CAAyB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAzB;AACA,GAlBC,CAAF;AAmBA,CAxDO,CAAR","sourcesContent":["import dropEmptyRows from './dropEmptyRows'\n\ndescribe('dropEmptyRows', () => {\n\tit('should drop empty rows (only at the end)', () => {\n\t\tdropEmptyRows([\n\t\t\t[null, null, null],\n\t\t\t['A', 'B', 'C'],\n\t\t\t[null, 'D', null],\n\t\t\t[null, null, null],\n\t\t\t['E', 'F', 'G'],\n\t\t\t[null, null, null]\n\t\t], {\n\t\t\tonlyTrimAtTheEnd: true\n\t\t})\n\t\t.should.deep.equal([\n\t\t\t[null, null, null],\n\t\t\t['A', 'B', 'C'],\n\t\t\t[null, 'D', null],\n\t\t\t[null, null, null],\n\t\t\t['E', 'F', 'G']\n\t\t])\n\t})\n\n\tit('should drop empty rows', () => {\n\t\tdropEmptyRows([\n\t\t\t[null, null, null],\n\t\t\t['A', 'B', 'C'],\n\t\t\t[null, 'D', null],\n\t\t\t[null, null, null],\n\t\t\t['E', 'F', 'G'],\n\t\t\t[null, null, null]\n\t\t])\n\t\t.should.deep.equal([\n\t\t\t['A', 'B', 'C'],\n\t\t\t[null, 'D', null],\n\t\t\t['E', 'F', 'G']\n\t\t])\n\t})\n\n\tit('should generate row map when dropping empty rows', () => {\n\t\tconst rowMap = [0, 1, 2, 3, 4]\n\n\t\tdropEmptyRows([\n\t\t\t[null, null, null],\n\t\t\t['A', 'B', 'C'],\n\t\t\t[null, 'D', null],\n\t\t\t[null, null, null],\n\t\t\t['E', 'F', 'G']\n\t\t],\n\t\t{ rowMap })\n\t\t.should.deep.equal([\n\t\t\t['A', 'B', 'C'],\n\t\t\t[null, 'D', null],\n\t\t\t['E', 'F', 'G']\n\t\t])\n\n\t\trowMap.should.deep.equal([1, 2, 4])\n\t})\n})"],"file":"dropEmptyRows.test.js"}