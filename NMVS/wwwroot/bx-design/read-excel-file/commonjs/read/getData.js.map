{"version":3,"sources":["../../source/read/getData.js"],"names":["getData","sheet","options","dimensions","cells","length","leftTop","rightBottom","colsCount","column","rowsCount","row","data","Array","i","j","cell","value","rowMap","onlyTrimAtTheEnd","transformData"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;AAEe,SAASA,OAAT,CAAiBC,KAAjB,EAAwBC,OAAxB,EAAiC;AAC9C,MAAQC,UAAR,GAA8BF,KAA9B,CAAQE,UAAR;AAAA,MAAoBC,KAApB,GAA8BH,KAA9B,CAAoBG,KAApB,CAD8C,CAG9C;;AACA,MAAIA,KAAK,CAACC,MAAN,KAAiB,CAArB,EAAwB;AACtB,WAAO,EAAP;AACD;;AAED,mCAA+BF,UAA/B;AAAA,MAAOG,OAAP;AAAA,MAAgBC,WAAhB;;AAEA,MAAMC,SAAS,GAAID,WAAW,CAACE,MAAZ,GAAqBH,OAAO,CAACG,MAA9B,GAAwC,CAA1D;AACA,MAAMC,SAAS,GAAIH,WAAW,CAACI,GAAZ,GAAkBL,OAAO,CAACK,GAA3B,GAAkC,CAApD,CAX8C,CAa9C;;AACA,MAAIC,IAAI,GAAG,IAAIC,KAAJ,CAAUH,SAAV,CAAX;AACA,MAAII,CAAC,GAAG,CAAR;;AACA,SAAOA,CAAC,GAAGJ,SAAX,EAAsB;AACpBE,IAAAA,IAAI,CAACE,CAAD,CAAJ,GAAU,IAAID,KAAJ,CAAUL,SAAV,CAAV;AACA,QAAIO,CAAC,GAAG,CAAR;;AACA,WAAOA,CAAC,GAAGP,SAAX,EAAsB;AACpBI,MAAAA,IAAI,CAACE,CAAD,CAAJ,CAAQC,CAAR,IAAa,IAAb;AACAA,MAAAA,CAAC;AACF;;AACDD,IAAAA,CAAC;AACF,GAxB6C,CA0B9C;AACA;AACA;AACA;;;AACA,uDAAmBV,KAAnB,wCAA0B;AAAA,QAAfY,IAAe;AACxB,QAAML,GAAG,GAAGK,IAAI,CAACL,GAAL,GAAWL,OAAO,CAACK,GAA/B;AACA,QAAMF,MAAM,GAAGO,IAAI,CAACP,MAAL,GAAcH,OAAO,CAACG,MAArC;AACAG,IAAAA,IAAI,CAACD,GAAD,CAAJ,CAAUF,MAAV,IAAoBO,IAAI,CAACC,KAAzB;AACD,GAlC6C,CAoC9C;;;AACA,MAAQC,MAAR,GAAmBhB,OAAnB,CAAQgB,MAAR;;AACA,MAAIA,MAAJ,EAAY;AACV,QAAIJ,GAAC,GAAG,CAAR;;AACA,WAAOA,GAAC,GAAGF,IAAI,CAACP,MAAhB,EAAwB;AACtBa,MAAAA,MAAM,CAACJ,GAAD,CAAN,GAAYA,GAAZ;AACAA,MAAAA,GAAC;AACF;AACF,GA5C6C,CA8C9C;;;AACAF,EAAAA,IAAI,GAAG,+BACL,kCAAiBA,IAAjB,EAAuB;AAAEO,IAAAA,gBAAgB,EAAE;AAApB,GAAvB,CADK,EAEL;AAAEA,IAAAA,gBAAgB,EAAE,IAApB;AAA0BD,IAAAA,MAAM,EAANA;AAA1B,GAFK,CAAP,CA/C8C,CAoD9C;;AACA,MAAIhB,OAAO,CAACkB,aAAZ,EAA2B;AACzBR,IAAAA,IAAI,GAAGV,OAAO,CAACkB,aAAR,CAAsBR,IAAtB,CAAP,CADyB,CAEzB;AACA;AACA;AACA;AACA;AACD;;AAED,SAAOA,IAAP;AACD","sourcesContent":["import dropEmptyRows from './dropEmptyRows'\nimport dropEmptyColumns from './dropEmptyColumns'\n\nexport default function getData(sheet, options) {\n  const { dimensions, cells } = sheet\n\n  // If the sheet is empty.\n  if (cells.length === 0) {\n    return []\n  }\n\n  const [leftTop, rightBottom] = dimensions\n\n  const colsCount = (rightBottom.column - leftTop.column) + 1\n  const rowsCount = (rightBottom.row - leftTop.row) + 1\n\n  // Initialize spreadsheet data structure.\n  let data = new Array(rowsCount)\n  let i = 0\n  while (i < rowsCount) {\n    data[i] = new Array(colsCount)\n    let j = 0\n    while (j < colsCount) {\n      data[i][j] = null\n      j++\n    }\n    i++\n  }\n\n  // Fill in spreadsheet data structure.\n  // (this code implies that `cells` aren't necessarily sorted by row and column:\n  //  maybe that's not correct, this piece code was initially copy-pasted\n  //  from some other library that used `XPath`)\n  for (const cell of cells) {\n    const row = cell.row - leftTop.row\n    const column = cell.column - leftTop.column\n    data[row][column] = cell.value\n  }\n\n  // Fill in the row map.\n  const { rowMap } = options\n  if (rowMap) {\n    let i = 0\n    while (i < data.length) {\n      rowMap[i] = i\n      i++\n    }\n  }\n\n  // Drop empty columns or rows.\n  data = dropEmptyRows(\n    dropEmptyColumns(data, { onlyTrimAtTheEnd: true }),\n    { onlyTrimAtTheEnd: true, rowMap }\n  )\n\n  // Optionally transform data before applying `schema`.\n  if (options.transformData) {\n    data = options.transformData(data)\n    // data = options.transformData(data, {\n    //   dropEmptyRowsAndColumns(data) {\n    //     return dropEmptyRows(dropEmptyColumns(data), { rowMap })\n    //   }\n    // })\n  }\n\n  return data\n}"],"file":"getData.js"}