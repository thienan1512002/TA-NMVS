{"version":3,"sources":["../../source/read/parseCell.js"],"names":["parseCell","node","sheet","xml","values","styles","properties","options","coords","getAttribute","valueElement","value","textContent","type","hasAttribute","row","column","getInlineStringValue","getStyleId"],"mappings":";;;;;;;AAAA;;AAEA;;AAIA;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAASA,SAAT,CAAmBC,IAAnB,EAAyBC,KAAzB,EAAgCC,GAAhC,EAAqCC,MAArC,EAA6CC,MAA7C,EAAqDC,UAArD,EAAiEC,OAAjE,EAA0E;AACvF,MAAMC,MAAM,GAAG,uCAAqBP,IAAI,CAACQ,YAAL,CAAkB,GAAlB,CAArB,CAAf;AAEA,MAAMC,YAAY,GAAG,wBAAaR,KAAb,EAAoBD,IAApB,CAArB,CAHuF,CAKvF;AACA;AACA;;AACA,MAAIU,KAAK,GAAGD,YAAY,IAAIA,YAAY,CAACE,WAAzC;AAEA,MAAIC,IAAJ;;AACA,MAAIZ,IAAI,CAACa,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1BD,IAAAA,IAAI,GAAGZ,IAAI,CAACQ,YAAL,CAAkB,GAAlB,CAAP;AACD;;AAED,SAAO;AACLM,IAAAA,GAAG,EAAEP,MAAM,CAAC,CAAD,CADN;AAELQ,IAAAA,MAAM,EAAER,MAAM,CAAC,CAAD,CAFT;AAGLG,IAAAA,KAAK,EAAE,gCAAeA,KAAf,EAAsBE,IAAtB,EAA4B;AACjCI,MAAAA,oBAAoB,EAAE;AAAA,eAAM,oCAAyBf,KAAzB,EAAgCD,IAAhC,CAAN;AAAA,OADW;AAEjCiB,MAAAA,UAAU,EAAE;AAAA,eAAMjB,IAAI,CAACQ,YAAL,CAAkB,GAAlB,CAAN;AAAA,OAFqB;AAGjCJ,MAAAA,MAAM,EAANA,MAHiC;AAIjCD,MAAAA,MAAM,EAANA,MAJiC;AAKjCE,MAAAA,UAAU,EAAVA,UALiC;AAMjCC,MAAAA,OAAO,EAAPA;AANiC,KAA5B;AAHF,GAAP;AAYD","sourcesContent":["import parseCellValue from './parseCellValue'\n\nimport {\n  parseCellCoordinates\n} from './coordinates'\n\nimport {\n  getCellValue,\n  getCellInlineStringValue\n} from '../xml/xlsx'\n\n// Example of a `<c/>`ell element:\n//\n// <c>\n//    <f>string</f> — formula.\n//    <v>string</v> — formula pre-computed value.\n//    <is>\n//       <t>string</t> — an `inlineStr` string (rather than a \"common string\" from a dictionary).\n//       <r>\n//          <rPr>\n//            ...\n//          </rPr>\n//          <t>string</t>\n//       </r>\n//       <rPh sb=\"1\" eb=\"1\">\n//          <t>string</t>\n//       </rPh>\n//       <phoneticPr fontId=\"1\"/>\n//    </is>\n//    <extLst>\n//       <ext>\n//          <!--any element-->\n//       </ext>\n//    </extLst>\n// </c>\n//\nexport default function parseCell(node, sheet, xml, values, styles, properties, options) {\n  const coords = parseCellCoordinates(node.getAttribute('r'))\n\n  const valueElement = getCellValue(sheet, node)\n\n  // For `xpath`, `value` can be `undefined` while for native `DOMParser` it's `null`.\n  // So using `value && ...` instead of `if (value !== undefined) { ... }` here\n  // for uniform compatibility with both `xpath` and native `DOMParser`.\n  let value = valueElement && valueElement.textContent\n\n  let type\n  if (node.hasAttribute('t')) {\n    type = node.getAttribute('t')\n  }\n\n  return {\n    row: coords[0],\n    column: coords[1],\n    value: parseCellValue(value, type, {\n      getInlineStringValue: () => getCellInlineStringValue(sheet, node),\n      getStyleId: () => node.getAttribute('s'),\n      styles,\n      values,\n      properties,\n      options\n    })\n  }\n}"],"file":"parseCell.js"}