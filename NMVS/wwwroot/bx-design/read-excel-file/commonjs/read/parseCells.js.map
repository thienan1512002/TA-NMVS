{"version":3,"sources":["../../source/read/parseCells.js"],"names":["parseCells","sheet","xml","values","styles","properties","options","cells","length","map","node"],"mappings":";;;;;;;AAAA;;AAEA;;;;AAKe,SAASA,UAAT,CAAoBC,KAApB,EAA2BC,GAA3B,EAAgCC,MAAhC,EAAwCC,MAAxC,EAAgDC,UAAhD,EAA4DC,OAA5D,EAAqE;AAClF,MAAMC,KAAK,GAAG,oBAASN,KAAT,CAAd;;AAEA,MAAIM,KAAK,CAACC,MAAN,KAAiB,CAArB,EAAwB;AACtB,WAAO,EAAP;AACD,GALiF,CAOlF;AACA;AACA;AACA;AACA;;;AAEA,SAAOD,KAAK,CAACE,GAAN,CAAU,UAACC,IAAD,EAAU;AACzB,WAAO,2BAAUA,IAAV,EAAgBT,KAAhB,EAAuBC,GAAvB,EAA4BC,MAA5B,EAAoCC,MAApC,EAA4CC,UAA5C,EAAwDC,OAAxD,CAAP;AACD,GAFM,CAAP;AAGD","sourcesContent":["import parseCell from './parseCell'\n\nimport {\n  getCells,\n  getMergedCells\n} from '../xml/xlsx'\n\nexport default function parseCells(sheet, xml, values, styles, properties, options) {\n  const cells = getCells(sheet)\n\n  if (cells.length === 0) {\n    return []\n  }\n\n  // const mergedCells = getMergedCells(sheet)\n  // for (const mergedCell of mergedCells) {\n  //   const [from, to] = mergedCell.split(':').map(parseCellCoordinates)\n  //   console.log('Merged Cell.', 'From:', from, 'To:', to)\n  // }\n\n  return cells.map((node) => {\n    return parseCell(node, sheet, xml, values, styles, properties, options)\n  })\n}"],"file":"parseCells.js"}