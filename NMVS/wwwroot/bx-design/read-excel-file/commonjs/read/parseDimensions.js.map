{"version":3,"sources":["../../source/read/parseDimensions.js"],"names":["parseDimensions","sheet","dimensions","split","map","parseCellCoordinates","row","column","length"],"mappings":";;;;;;;AAAA;;AAIA;;;;;;;;;;;;;;AAIe,SAASA,eAAT,CAAyBC,KAAzB,EAAgC;AAC7C,MAAIC,UAAU,GAAG,yBAAcD,KAAd,CAAjB;;AACA,MAAIC,UAAJ,EAAgB;AACdA,IAAAA,UAAU,GAAGA,UAAU,CAACC,KAAX,CAAiB,GAAjB,EAAsBC,GAAtB,CAA0BC,iCAA1B,EAAgDD,GAAhD,CAAoD;AAAA;AAAA,UAAEE,GAAF;AAAA,UAAOC,MAAP;;AAAA,aAAoB;AACnFD,QAAAA,GAAG,EAAHA,GADmF;AAEnFC,QAAAA,MAAM,EAANA;AAFmF,OAApB;AAAA,KAApD,CAAb,CADc,CAKd;AACA;;AACA,QAAIL,UAAU,CAACM,MAAX,KAAsB,CAA1B,EAA6B;AAC3BN,MAAAA,UAAU,GAAG,CAACA,UAAU,CAAC,CAAD,CAAX,EAAgBA,UAAU,CAAC,CAAD,CAA1B,CAAb;AACD;;AACD,WAAOA,UAAP;AACD;AACF","sourcesContent":["import {\n  parseCellCoordinates\n} from './coordinates'\n\nimport {\n  getDimensions\n} from '../xml/xlsx'\n\nexport default function parseDimensions(sheet) {\n  let dimensions = getDimensions(sheet)\n  if (dimensions) {\n    dimensions = dimensions.split(':').map(parseCellCoordinates).map(([row, column]) => ({\n      row,\n      column\n    }))\n    // When there's only a single cell on a sheet\n    // there can sometimes be just \"A1\" for the dimensions string.\n    if (dimensions.length === 1) {\n      dimensions = [dimensions[0], dimensions[0]]\n    }\n    return dimensions\n  }\n}\n\n"],"file":"parseDimensions.js"}