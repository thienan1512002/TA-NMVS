{"version":3,"sources":["../../source/read/parseFilePaths.js"],"names":["parseFilePaths","content","xml","document","createDocument","filePaths","sheets","sharedStrings","undefined","styles","addFilePathInfo","relationship","filePath","getAttribute","fileType","getFilePath","forEach","path","slice","length"],"mappings":";;;;;;;AAAA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAASA,cAAT,CAAwBC,OAAxB,EAAiCC,GAAjC,EAAsC;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,QAAQ,GAAGD,GAAG,CAACE,cAAJ,CAAmBH,OAAnB,CAAjB;AAEA,MAAMI,SAAS,GAAG;AAChBC,IAAAA,MAAM,EAAE,EADQ;AAEhBC,IAAAA,aAAa,EAAEC,SAFC;AAGhBC,IAAAA,MAAM,EAAED;AAHQ,GAAlB;;AAMA,MAAME,eAAe,GAAG,SAAlBA,eAAkB,CAACC,YAAD,EAAkB;AACxC,QAAMC,QAAQ,GAAGD,YAAY,CAACE,YAAb,CAA0B,QAA1B,CAAjB;AACA,QAAMC,QAAQ,GAAGH,YAAY,CAACE,YAAb,CAA0B,MAA1B,CAAjB;;AACA,YAAQC,QAAR;AACE,WAAK,4EAAL;AACET,QAAAA,SAAS,CAACI,MAAV,GAAmBM,WAAW,CAACH,QAAD,CAA9B;AACA;;AACF,WAAK,mFAAL;AACEP,QAAAA,SAAS,CAACE,aAAV,GAA0BQ,WAAW,CAACH,QAAD,CAArC;AACA;;AACF,WAAK,+EAAL;AACEP,QAAAA,SAAS,CAACC,MAAV,CAAiBK,YAAY,CAACE,YAAb,CAA0B,IAA1B,CAAjB,IAAoDE,WAAW,CAACH,QAAD,CAA/D;AACA;AATJ;AAWD,GAdD;;AAgBA,8BAAiBT,QAAjB,EAA2Ba,OAA3B,CAAmCN,eAAnC,EAjCmD,CAmCnD;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAOL,SAAP;AACD;;AAED,SAASU,WAAT,CAAqBE,IAArB,EAA2B;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAIA,IAAI,CAAC,CAAD,CAAJ,KAAY,GAAhB,EAAqB;AACnB,WAAOA,IAAI,CAACC,KAAL,CAAW,IAAIC,MAAf,CAAP;AACD,GAVwB,CAWzB;AACA;AACA;AACA;AACA;;;AACA,SAAO,QAAQF,IAAf;AACD","sourcesContent":["import {\n  getRelationships\n} from '../xml/xlsx'\n\n/**\n * Returns sheet file paths.\n * Seems that the correct place to look for the `sheetId` -> `filename` mapping\n * is `xl/_rels/workbook.xml.rels` file.\n * https://github.com/tidyverse/readxl/issues/104\n * @param  {string} content â€” `xl/_rels/workbook.xml.rels` file contents.\n * @param  {object} xml\n * @return {object}\n */\nexport default function parseFilePaths(content, xml) {\n  // Example:\n  // <Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">\n  //   ...\n  //   <Relationship\n  //     Id=\"rId3\"\n  //     Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet\"\n  //     Target=\"worksheets/sheet1.xml\"/>\n  // </Relationships>\n  const document = xml.createDocument(content)\n\n  const filePaths = {\n    sheets: {},\n    sharedStrings: undefined,\n    styles: undefined\n  }\n\n  const addFilePathInfo = (relationship) => {\n    const filePath = relationship.getAttribute('Target')\n    const fileType = relationship.getAttribute('Type')\n    switch (fileType) {\n      case 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles':\n        filePaths.styles = getFilePath(filePath)\n        break\n      case 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings':\n        filePaths.sharedStrings = getFilePath(filePath)\n        break\n      case 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet':\n        filePaths.sheets[relationship.getAttribute('Id')] = getFilePath(filePath)\n        break\n    }\n  }\n\n  getRelationships(document).forEach(addFilePathInfo)\n\n  // Seems like \"sharedStrings.xml\" is not required to exist.\n  // For example, when the spreadsheet doesn't contain any strings.\n  // https://github.com/catamphetamine/read-excel-file/issues/85\n  // if (!filePaths.sharedStrings) {\n  //   throw new Error('\"sharedStrings.xml\" file not found in the *.xlsx file')\n  // }\n\n  return filePaths\n}\n\nfunction getFilePath(path) {\n  // Normally, `path` is a relative path inside the ZIP archive,\n  // like \"worksheets/sheet1.xml\", or \"sharedStrings.xml\", or \"styles.xml\".\n  // There has been one weird case when file path was an absolute path,\n  // like \"/xl/worksheets/sheet1.xml\" (specifically for sheets):\n  // https://github.com/catamphetamine/read-excel-file/pull/95\n  // Other libraries (like `xlsx`) and software (like Google Docs)\n  // seem to support such absolute file paths, so this library does too.\n  if (path[0] === '/') {\n    return path.slice('/'.length)\n  }\n  // // Seems like a path could also be a URL.\n  // // http://officeopenxml.com/anatomyofOOXML-xlsx.php\n  // if (/^[a-z]+\\:\\/\\//.test(path)) {\n  //   return path\n  // }\n  return 'xl/' + path\n}"],"file":"parseFilePaths.js"}