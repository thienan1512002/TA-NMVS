{"version":3,"sources":["../../source/read/parseCellValue.js"],"names":["parseDate","BUILT_IN_DATE_NUMBER_FORMAT_IDS","getCellValue","value","type","getInlineStringValue","getStyleId","styles","values","properties","options","trim","undefined","Error","parseInt","decodeError","Date","parseFloat","styleId","style","indexOf","numberFormat","id","dateFormat","template","smartDateParser","isDateTemplate","TypeError","errorCode","tokens","split","token"],"mappings":"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","sourcesContent":["import parseDate from './parseDate'\n\n// https://hexdocs.pm/xlsxir/number_styles.html\nconst BUILT_IN_DATE_NUMBER_FORMAT_IDS = [14,15,16,17,18,19,20,21,22,27,30,36,45,46,47,50,57]\n\nexport default function getCellValue(value, type, {\n\tgetInlineStringValue,\n\tgetStyleId,\n\tstyles,\n\tvalues,\n\tproperties,\n\toptions\n}) {\n  if (!type) {\n    // Default cell type is \"n\" (numeric).\n    // http://www.datypic.com/sc/ooxml/t-ssml_CT_Cell.html\n    type = 'n'\n  }\n\n  // Available Excel cell types:\n  // https://github.com/SheetJS/sheetjs/blob/19620da30be2a7d7b9801938a0b9b1fd3c4c4b00/docbits/52_datatype.md\n  //\n  // Some other document (seems to be old):\n  // http://webapp.docx4java.org/OnlineDemo/ecma376/SpreadsheetML/ST_CellType.html\n  //\n  switch (type) {\n    // If the cell contains formula string.\n    case 'str':\n      value = value.trim()\n      if (value === '') {\n        value = undefined\n      }\n      break\n\n    // If the cell contains an \"inline\" (not \"shared\") string.\n    case 'inlineStr':\n      value = getInlineStringValue()\n      if (value === undefined) {\n        throw new Error(`Unsupported \"inline string\" cell value structure`) // : ${cellNode.textContent}`)\n      }\n      value = value.trim()\n      if (value === '') {\n        value = undefined\n      }\n      break\n\n    // If the cell contains a \"shared\" string.\n    // \"Shared\" strings is a way for an Excel editor to reduce\n    // the file size by storing \"commonly used\" strings in a dictionary\n    // and then referring to such strings by their index in that dictionary.\n    case 's':\n      // If a cell has no value then there's no `<c/>` element for it.\n      // If a `<c/>` element exists then it's not empty.\n      // The `<v/>`alue is a key in the \"shared strings\" dictionary of the\n      // XLSX file, so look it up in the `values` dictionary by the numeric key.\n      value = values[parseInt(value)]\n      value = value.trim()\n      if (value === '') {\n        value = undefined\n      }\n      break\n\n    case 'b':\n      value = value === '1' ? true : false\n      break\n\n    // Stub: blank stub cell that is ignored by data processing utilities.\n    case 'z':\n      value = undefined\n      break\n\n    // Error: `value` is a numeric code.\n    // They also wrote: \"and `w` property stores its common name\".\n    // It's unclear what they meant by that.\n    case 'e':\n      value = decodeError(value)\n      break\n\n    // Date: a string to be parsed as a date.\n    // (usually a string in \"ISO 8601\" format)\n    case 'd':\n      if (value === undefined) {\n        break\n      }\n      value = new Date(value)\n      break\n\n    case 'n':\n      if (value === undefined) {\n        break\n      }\n      value = parseFloat(value)\n      // XLSX does have \"d\" type for dates, but it's not commonly used.\n      //  specific format for dates.\n      // Sometimes a date can be heuristically detected.\n      // https://github.com/catamphetamine/read-excel-file/issues/3#issuecomment-395770777\n      //\n      // Format IDs:\n      // https://xlsxwriter.readthedocs.io/format.html#format-set-num-format\n      //\n      const styleId = getStyleId()\n      if (styleId) {\n        // styleId = parseInt(styleId)\n        const style = styles[styleId]\n        if (!style) {\n          throw new Error(`Cell style not found: ${styleId}`)\n        }\n        if (BUILT_IN_DATE_NUMBER_FORMAT_IDS.indexOf(parseInt(style.numberFormat.id)) >= 0 ||\n          (options.dateFormat && style.numberFormat.template === options.dateFormat) ||\n          (options.smartDateParser !== false && style.numberFormat.template && isDateTemplate(style.numberFormat.template))) {\n          value = parseDate(value, properties)\n        }\n      }\n      break\n\n    default:\n      throw new TypeError(`Cell type not supported: ${type}`)\n  }\n\n  // Convert empty values to `null`.\n  if (value === undefined) {\n    value = null\n  }\n\n  return value\n}\n\n// Decodes numeric error code to a string code.\n// https://github.com/SheetJS/sheetjs/blob/19620da30be2a7d7b9801938a0b9b1fd3c4c4b00/docbits/52_datatype.md\nfunction decodeError(errorCode) {\n  // While the error values are determined by the application,\n  // the following are some example error values that could be used:\n  switch (errorCode) {\n    case 0x00:\n      return '#NULL!'\n    case 0x07:\n      return '#DIV/0!'\n    case 0x0F:\n      return '#VALUE!'\n    case 0x17:\n      return '#REF!'\n    case 0x1D:\n      return '#NAME?'\n    case 0x24:\n      return '#NUM!'\n    case 0x2A:\n      return '#N/A'\n    case 0x2B:\n      return '#GETTING_DATA'\n    default:\n      // Such error code doesn't exist. I made it up.\n      return `#ERROR_${errorCode}`\n  }\n}\n\nfunction isDateTemplate(template) {\n  const tokens = template.split(/\\W+/)\n  for (const token of tokens) {\n    if (['MM', 'DD', 'YY', 'YYYY'].indexOf(token) < 0) {\n      return false\n    }\n  }\n  return true\n}\n"],"file":"parseCellValue.js"}