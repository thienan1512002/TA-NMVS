{"version":3,"sources":["../../source/read/readXlsxFileNode.test.js"],"names":["path","readXlsxFileNode","describe","it","schema","prop","type","Date","Number","required","Boolean","String","parse","value","rowMap","resolve","__dirname","then","rows","date","getTime","should","deep","equal","convertToUTCTimezone","numberOfStudents","course","isFree","cost","title","contact","map","errors","getTimezoneOffset"],"mappings":"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","sourcesContent":["import path from 'path'\n\nimport readXlsxFileNode from './readXlsxFileNode'\n\ndescribe('readXlsxFileNode', () => {\n\tit('should read *.xlsx file on Node.js and parse it to JSON', () => {\n\t\tconst schema = {\n\t\t\t'START DATE': {\n\t\t\t\tprop: 'date',\n\t\t\t\ttype: Date\n\t\t\t},\n\t\t\t'NUMBER OF STUDENTS': {\n\t\t\t\tprop: 'numberOfStudents',\n\t\t\t\ttype: Number,\n\t\t\t\trequired: true\n\t\t\t},\n\t\t\t'COURSE': {\n\t\t\t\tprop: 'course',\n\t\t\t\ttype: {\n\t\t\t\t\t'IS FREE': {\n\t\t\t\t\t\tprop: 'isFree',\n\t\t\t\t\t\ttype: Boolean\n\t\t\t\t\t\t// Excel stored booleans as numbers:\n\t\t\t\t\t\t// `1` is `true` and `0` is `false`.\n\t\t\t\t\t\t// Such numbers are parsed to booleans.\n\t\t\t\t\t},\n\t\t\t\t\t'COST': {\n\t\t\t\t\t\tprop: 'cost',\n\t\t\t\t\t\ttype: Number\n\t\t\t\t\t},\n\t\t\t\t\t'COURSE TITLE': {\n\t\t\t\t\t\tprop: 'title',\n\t\t\t\t\t\ttype: String\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t'CONTACT': {\n\t\t\t\tprop: 'contact',\n\t\t\t\trequired: true,\n\t\t\t\tparse(value) {\n\t\t\t\t\treturn '+11234567890'\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst rowMap = []\n\n\t\treturn readXlsxFileNode(path.resolve(__dirname, '../../test/spreadsheets/course.xlsx'), { schema, rowMap }).then(({ rows }) => {\n\t\t\trows[0].date = rows[0].date.getTime()\n\t\t\trows.should.deep.equal([{\n\t\t\t\tdate: convertToUTCTimezone(new Date(2018, 2, 24)).getTime(),\n\t\t\t\tnumberOfStudents: 123,\n\t\t\t\tcourse: {\n\t\t\t\t\tisFree: false,\n\t\t\t\t\tcost: 210.45,\n\t\t\t\t\ttitle: 'Chemistry'\n\t\t\t\t},\n\t\t\t\tcontact: '+11234567890'\n\t\t\t}])\n\t\t\trowMap.should.deep.equal([0, 1])\n\t\t})\n\t})\n\n\tit('should read *.xlsx file on Node.js and map it to JSON', () => {\n\t\tconst map = {\n\t\t\t'START DATE': 'date',\n\t\t\t'NUMBER OF STUDENTS': 'numberOfStudents',\n\t\t\t'COURSE': {\n\t\t\t\t'course': {\n\t\t\t\t\t'IS FREE': 'isFree',\n\t\t\t\t\t'COST': 'cost',\n\t\t\t\t\t'COURSE TITLE': 'title'\n\t\t\t\t}\n\t\t\t},\n\t\t\t'CONTACT': 'contact'\n\t\t}\n\n\t\tconst rowMap = []\n\n\t\treturn readXlsxFileNode(path.resolve(__dirname, '../../test/spreadsheets/course.xlsx'), { map, rowMap }).then(({ rows, errors }) => {\n\t\t\terrors.should.deep.equal([])\n\t\t\trows[0].date = rows[0].date.getTime()\n\t\t\trows.should.deep.equal([{\n\t\t\t\tdate: convertToUTCTimezone(new Date(2018, 2, 24)).getTime(),\n\t\t\t\tnumberOfStudents: 123,\n\t\t\t\tcourse: {\n\t\t\t\t\tisFree: false,\n\t\t\t\t\tcost: 210.45,\n\t\t\t\t\ttitle: 'Chemistry'\n\t\t\t\t},\n\t\t\t\tcontact: '(123) 456-7890'\n\t\t\t}])\n\t\t\trowMap.should.deep.equal([0, 1])\n\t\t})\n\t})\n})\n\n// Converts timezone to UTC while preserving the same time\nfunction convertToUTCTimezone(date) {\n\t// Doesn't account for leap seconds but I guess that's ok\n\t// given that javascript's own `Date()` does not either.\n\t// https://www.timeanddate.com/time/leap-seconds-background.html\n\t//\n\t// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset\n\t//\n\treturn new Date(date.getTime() - date.getTimezoneOffset() * 60 * 1000)\n}\n"],"file":"readXlsxFileNode.test.js"}