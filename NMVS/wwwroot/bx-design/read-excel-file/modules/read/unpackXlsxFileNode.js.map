{"version":3,"sources":["../../source/read/unpackXlsxFileNode.js"],"names":["fs","Stream","unzip","unpackXlsxFile","input","entries","stream","createReadStream","Promise","resolve","reject","entryPromises","on","pipe","Parse","all","then","entry","contents","push","data","toString","path"],"mappings":"AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AAEA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAC5C;AACA;AACA;AACA,MAAMC,OAAO,GAAG,EAAhB;AAEA,MAAMC,MAAM,GAAGF,KAAK,YAAYH,MAAjB,GAA0BG,KAA1B,GAAkCJ,EAAE,CAACO,gBAAH,CAAoBH,KAApB,CAAjD;AAEA,SAAO,IAAII,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAMC,aAAa,GAAG,EAAtB;AAEAL,IAAAA,MAAM,CACJ;AADI,KAEHM,EAFH,CAEM,OAFN,EAEeF,MAFf,EAGGG,IAHH,CAGQX,KAAK,CAACY,KAAN,EAHR,EAIE;AAJF,KAKGF,EALH,CAKM,OALN,EAKeF,MALf,EAMGE,EANH,CAMM,OANN,EAMe;AAAA,aAAOJ,OAAO,CAACO,GAAR,CAAYJ,aAAZ,EAA2BK,IAA3B,CAAgC;AAAA,eAAMP,OAAO,CAACJ,OAAD,CAAb;AAAA,OAAhC,CAAP;AAAA,KANf,EAOGO,EAPH,CAOM,OAPN,EAOe,UAACK,KAAD,EAAW;AACtB,UAAIC,QAAQ,GAAG,EAAf,CADsB,CAEtB;;AACAP,MAAAA,aAAa,CAACQ,IAAd,CAAmB,IAAIX,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC1CQ,QAAAA,KAAK,CACFL,EADH,CACM,MADN,EACc,UAAAQ,IAAI;AAAA,iBAAIF,QAAQ,IAAIE,IAAI,CAACC,QAAL,EAAhB;AAAA,SADlB,EAEGT,EAFH,CAEM,KAFN,EAEa;AAAA,iBAAMH,OAAO,CAACJ,OAAO,CAACY,KAAK,CAACK,IAAP,CAAP,GAAsBJ,QAAvB,CAAb;AAAA,SAFb;AAGD,OAJkB,CAAnB;AAKD,KAfH;AAgBD,GAnBM,CAAP;AAoBD","sourcesContent":["import fs from 'fs'\nimport Stream from 'stream'\nimport unzip from 'unzipper'\n\n/**\n * Reads XLSX file in Node.js.\n * @param  {(string|Stream)} input - A Node.js readable stream or a path to a file.\n * @return {Promise} Resolves to an object holding XLSX file entries.\n */\nexport default function unpackXlsxFile(input) {\n  // XLSX file is a zip archive.\n  // The `entries` object stores the files\n  // and their contents from this XLSX zip archive.\n  const entries = {}\n\n  const stream = input instanceof Stream ? input : fs.createReadStream(input)\n\n  return new Promise((resolve, reject) => {\n    const entryPromises = []\n\n    stream\n      // This first \"error\" listener is for the original stream errors.\n      .on('error', reject)\n      .pipe(unzip.Parse())\n      // This second \"error\" listener is for the unzip stream errors.\n      .on('error', reject)\n      .on('close', () =>  Promise.all(entryPromises).then(() => resolve(entries)))\n      .on('entry', (entry) => {\n        let contents = ''\n        // To ignore an entry: `entry.autodrain()`.\n        entryPromises.push(new Promise((resolve) => {\n          entry\n            .on('data', data => contents += data.toString())\n            .on('end', () => resolve(entries[entry.path] = contents))\n        }))\n      })\n  })\n}\n"],"file":"unpackXlsxFileNode.js"}